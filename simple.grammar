/**********************************************************************
 Grammar for Simple programs version 3
Last modification: Tue Oct 29 10:14:48 UTC 2024
 **********************************************************************/
program		::= PUBLIC CLASS id LCURLY classBody RCURLY
		;

classBody	::= declList (t)

declList 	::= declList decl (t)
		| /* epsilon */
		;

decl		::= fieldDecl
		| methodDecl
		;

fieldDecl	::= STATIC type id SEMICOLON
		;

methodDecl	::= PUBLIC STATIC VOID id formals methodBody // no return value (t)
                | PUBLIC STATIC INT id formals methodBody // int return value allowed (t)
	        ;						

formals		::= LPAREN RPAREN
		| LPAREN formalsList RPAREN
		;

formalsList	::= formalDecl
		| formalDecl COMMA formalsList
		;

formalDecl	::= type id
		;

methodBody	::= LCURLY varDeclList stmtList RCURLY
		;

varDeclList	::= varDeclList varDecl
		| /* epsilon */
		;

varDecl		::= type id SEMICOLON
		;

stmtList	::= stmtList stmt (t)
		| /* epsilon */
		;


/* the following rules are for the switch / case statement */

switchGroupList   ::= switchGroupList switchGroup
		| /* epsilon */
		;

switchGroup	::=   switchLabel stmtList
		;

switchLabel	::=   CASE exp COLON
		|     DEFAULT COLON
		;      
		     
stmt		::= PRINT LPAREN exp RPAREN SEMICOLON (t under assumption everything can be printed)
	        | id ASSIGN exp SEMICOLON (t)
	        | IF LPAREN exp RPAREN LCURLY stmtList RCURLY (t)
	        | IF LPAREN exp RPAREN LCURLY stmtList RCURLY ELSE LCURLY stmtList RCURLY (t)
	        | DO LCURLY stmtList RCURLY WHILE LPAREN exp RPAREN (t)
		| RETURN SEMICOLON (t not needed)
		| RETURN exp SEMICOLON // return with a value
	        | id LPAREN RPAREN SEMICOLON  	  // function call with no args (t not needed)
	        | id LPAREN actualList RPAREN SEMICOLON // with args (t)
		| LCURLY varDeclList stmtList RCURLY  // nested block (t)
		| SWITCH LPAREN exp RPAREN LCURLY switchGroupList RCURLY (t)
		;

exp		::= exp PLUS exp (t)
	        | exp MINUS exp (t)
	        | exp TIMES exp (t)
	        | exp DIVIDE exp (t)
	        | NOT exp (t)
	        | exp AND exp (t)
	        | exp OR exp (t)
		| exp EQUALS exp (t)
		| exp NOTEQUALS exp (t)
		| exp LESS exp (t)
		| exp GREATER exp (t)
		| exp LESSEQ exp (t)
		| exp GREATEREQ exp (t)
		| exp POWER exp  // potentiation operator, right-assoc -> NOTE: YOU NEED to add the
		      	    	 // ** token to  the scanner implementation (t)
		| MINUS exp (t)
		| id (t)
	        | INTLITERAL (t)
	        | STRINGLITERAL (t)
	        | TRUE (t)
	        | FALSE (t)
	        | LPAREN exp RPAREN (t)
	        | id LPAREN RPAREN   	      // function call with no args (t)
	        | id LPAREN actualList RPAREN // with args (t for return value, arguments not yet checked)
		
		;

actualList	::= exp
		| actualList COMMA exp
		;

type		::= INT
		| BOOLEAN
		| STRING
		;

id              ::= ID
		;

